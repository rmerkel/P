# fact.p, 2: { Calculate 11 (0..10) factorials
# fact.p, 3: {	 n		    n!	}
# fact.p, 4: {  ---  ---------	}
# fact.p, 5: {	 0		    0	}
# fact.p, 6: {	 1		    1	}
# fact.p, 7: {	 2		    2	}
# fact.p, 8: {	 3		    6	}
# fact.p, 9: {	...				}
# fact.p, 10: {	 9	  362,880	}
# fact.p, 11: {	10	3,628,800	}
# fact.p, 12: 
# fact.p, 13: const nFacts = 10;
    0: call 0, 27
    1: halt
# fact.p, 14: var p : integer;
# fact.p, 15: procedure factorial(n)
# fact.p, 16:     begin
    2: call 0, 4
    3: halt
# fact.p, 17:         p = 1;
    4: pushConst 1
    5: pushVar 1, 4
    6: assign
# fact.p, 18:         while n > 0 do begin
    7: pushVar 0, -1
    8: eval
    9: pushConst 0
   10: gt
   11: jneq 26
# fact.p, 19:             p = p * n;
   12: pushVar 1, 4
   13: eval
   14: pushVar 0, -1
   15: eval
   16: muli
   17: pushVar 1, 4
   18: assign
# fact.p, 20:             n = n - 1
   19: pushVar 0, -1
   20: eval
   21: pushConst 1
# fact.p, 21:         end
   22: subi
   23: pushVar 0, -1
   24: assign
# fact.p, 22:     end;
   25: jump 7
   26: ret
# fact.p, 23: 
# fact.p, 24: begin
   27: enter 1
# fact.p, 25:     factorial(nFacts)
   28: pushConst 10
# fact.p, 26: end.
   29: call 0, 4
   30: ret

        8:          1
        8:         10
        9:          9
        8:         90
        9:          8
        8:        720
        9:          7
        8:       5040
        9:          6
        8:      30240
        9:          5
        8:     151200
        9:          4
        8:     604800
        9:          3
        8:    1814400
        9:          2
        8:    3628800
        9:          1
        8:    3628800
        9:          0
