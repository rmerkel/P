# test/typefail.p, 2: { Test advanced types, fail	}
# test/typefail.p, 3: program typefail ;
# test/typefail.p, 4: type
    0: call 0, 2
    1: halt
# test/typefail.p, 5: 	rng = 0..9;
# test/typefail.p, 6: 	enum = (	one, two, three	);
# test/typefail.p, 7: 
# test/typefail.p, 8: var
# test/typefail.p, 9: 	i : integer;
# test/typefail.p, 10: 	r : rng;
# test/typefail.p, 11: 	a : array[rng] of integer;
# test/typefail.p, 12: 	a2 : array [enum] of integer;
# test/typefail.p, 13: 
# test/typefail.p, 14: begin
    2: enter 16
# test/typefail.p, 15: 	i := one;				{	error: expected integer, got enum		}
    3: pushvar 0, 4
    4: pushvar 0, 4
    5: eval
    6: assign
# test/typefail.p, 16: 
# test/typefail.p, 17: 	r := 0;
    7: pushvar 0, 5
    8: push 0
    9: assign
# test/typefail.p, 18: 	while r < 10 do begin 	{	warning: condition might always be true	}
   10: pushvar 0, 5
   11: eval
   12: push 10
   13: lt
   14: jneq 29
# test/typefail.p, 19: 		a[r] := r;
   15: pushvar 0, 6
   16: pushvar 0, 5
   17: eval
   18: add
   19: pushvar 0, 5
   20: eval
   21: assign
# test/typefail.p, 20: 		r := r + 1
   22: pushvar 0, 5
   23: pushvar 0, 5
   24: eval
   25: push 1
# test/typefail.p, 21: 	end;
   26: add
   27: assign
   28: jump 10
# test/typefail.p, 22: 	r := 10;				{	error: out-of-range/range check error	}
   29: pushvar 0, 5
   30: push 10
   31: assign
# test/typefail.p, 23: 
# test/typefail.p, 24: 	a2[one] := 1;
   32: pushvar 0, 7
   33: pushvar 0, 4
   34: eval
   35: add
   36: push 1
   37: assign
# test/typefail.p, 25: 	a2[2] := 2;				{	error: got integer, expected enum		}
   38: pushvar 0, 7
   39: push 2
   40: add
   41: push 2
   42: assign
# test/typefail.p, 26: 	a2[two + 1] := 3		{	error: expected enum, got integer		}
   43: pushvar 0, 7
   44: pushvar 0, 5
   45: eval
   46: push 1
   47: add
   48: add
   49: push 3
# test/typefail.p, 27: end .
   50: assign
   51: ret

        8: -        1
        9:          0
       10:          0
        9:          1
       11:          1
        9:          2
       12:          2
        9:          3
       13:          3
        9:          4
       14:          4
        9:          5
       15:          5
        9:          6
       16:          6
        9:          7
       17:          7
        9:          8
       18:          8
        9:          9
       19:          9
        9:         10
        9:         10
       10:          1
       13:          2
       22:          3
