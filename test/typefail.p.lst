test/typefail.p: incompatable assignment types near line 14
test/typefail.p: incompatable array index type, expected enumeration got integer near line 26
test/typefail.p: incompatable binary types near line 27
# test/typefail.p, 1: { Test advanced types, fail	}
# test/typefail.p, 2: program Typefail() is
# test/typefail.p, 3: type
    0: calli 0, 2
    1: halt
# test/typefail.p, 4: 	rng is 0..9;
# test/typefail.p, 5: 	enum is (	one, two, three	);
# test/typefail.p, 6: 
# test/typefail.p, 7: var
# test/typefail.p, 8: 	i : integer;
# test/typefail.p, 9: 	r : rng;
# test/typefail.p, 10: 	a : array[rng] of integer;
# test/typefail.p, 11: 	a2 : array [enum] of integer;
# test/typefail.p, 12: 
# test/typefail.p, 13: begin
    2: enter 15
# test/typefail.p, 14: 	i := one;				{	error: expected integer, got enum		}
    3: pushvar 0, 4
    4: push 0
    5: assign 1
# test/typefail.p, 15: 
# test/typefail.p, 16: 	r := 0;
    6: pushvar 0, 5
    7: push 0
    8: llimit 0
    9: ulimit 9
   10: assign 1
# test/typefail.p, 17: 	while r < 10 loop 		{	*** warning: condition might always be true	}
   11: pushvar 0, 5
   12: eval 1
   13: push 10
   14: lt
   15: jneqi 34
# test/typefail.p, 18: 		a[r] := r;
   16: pushvar 0, 6
   17: pushvar 0, 5
   18: eval 1
   19: llimit 0
   20: ulimit 9
   21: add
   22: pushvar 0, 5
   23: eval 1
   24: assign 1
# test/typefail.p, 19: 		r := r + 1
   25: pushvar 0, 5
   26: pushvar 0, 5
   27: eval 1
   28: push 1
# test/typefail.p, 20: 	endloop;
   29: add
   30: llimit 0
   31: ulimit 9
   32: assign 1
   33: jumpi 11
# test/typefail.p, 21: 	r := 10;				{	*** error: out-of-range/range check error	}
   34: pushvar 0, 5
   35: push 10
   36: llimit 0
   37: ulimit 9
   38: assign 1
# test/typefail.p, 22: 	a[10] := 10;			{	*** error: out-of-range/range check error	}
   39: pushvar 0, 6
   40: push 10
   41: llimit 0
   42: ulimit 9
   43: add
   44: push 10
   45: assign 1
# test/typefail.p, 23: 	a[1+9] := 10;			{	*** error: out-of-range/range check error	}
   46: pushvar 0, 6
   47: push 1
   48: push 9
   49: add
   50: llimit 0
   51: ulimit 9
   52: add
   53: push 10
   54: assign 1
# test/typefail.p, 24: 
# test/typefail.p, 25: 	a2[one] := 1;
   55: pushvar 0, 16
   56: push 0
   57: llimit 0
   58: ulimit 2
   59: add
   60: push 1
   61: assign 1
# test/typefail.p, 26: 	a2[2] := 2;				{	error: got integer, expected enum		}
   62: pushvar 0, 16
   63: push 2
   64: llimit 0
   65: ulimit 2
   66: add
   67: push 2
   68: assign 1
# test/typefail.p, 27: 	a2[two + 1] := 3		{	error: expected enum, got integer		}
   69: pushvar 0, 16
   70: push 1
   71: push 1
   72: add
   73: llimit 0
   74: ulimit 2
   75: add
   76: push 3
# test/typefail.p, 28: endprog
   77: assign 1
# test/typefail.p, 29: 
   78: ret

