./pas: incompatable binary types near line 14
./pas: incompatable array index type, expected enumeration got integer near line 26
./pas: incompatable binary types near line 27
# test/typefail.p, 1: { Test advanced types, fail	}
# test/typefail.p, 2: program typefail ;
# test/typefail.p, 3: type
    0: call 0, 2
    1: halt
# test/typefail.p, 4: 	rng = 0..9;
# test/typefail.p, 5: 	enum = (	one, two, three	);
# test/typefail.p, 6: 
# test/typefail.p, 7: var
# test/typefail.p, 8: 	i : integer;
# test/typefail.p, 9: 	r : rng;
# test/typefail.p, 10: 	a : array[rng] of integer;
# test/typefail.p, 11: 	a2 : array [enum] of integer;
# test/typefail.p, 12: 
# test/typefail.p, 13: begin
    2: enter 16
# test/typefail.p, 14: 	i := one;				{	error: expected integer, got enum		}
    3: pushvar 0, 4
    4: pushvar 0, 4
    5: eval
    6: assign
# test/typefail.p, 15: 
# test/typefail.p, 16: 	r := 0;
    7: pushvar 0, 5
    8: push 0
    9: assign
# test/typefail.p, 17: 	while r < 10 do begin 	{	*** warning: condition might always be true	}
   10: pushvar 0, 5
   11: eval
   12: push 10
   13: lt
   14: jneq 29
# test/typefail.p, 18: 		a[r] := r;
   15: pushvar 0, 6
   16: pushvar 0, 5
   17: eval
   18: add
   19: pushvar 0, 5
   20: eval
   21: assign
# test/typefail.p, 19: 		r := r + 1
   22: pushvar 0, 5
   23: pushvar 0, 5
   24: eval
   25: push 1
# test/typefail.p, 20: 	end;
   26: add
   27: assign
   28: jump 10
# test/typefail.p, 21: 	r := 10;				{	*** error: out-of-range/range check error	}
   29: pushvar 0, 5
   30: push 10
   31: assign
# test/typefail.p, 22: 	a[10] := 10;			{	*** error: out-of-range/range check error	}
   32: pushvar 0, 6
   33: push 10
   34: add
   35: push 10
   36: assign
# test/typefail.p, 23: 	a[1+9] := 10;			{	*** error: out-of-range/range check error	}
   37: pushvar 0, 6
   38: push 1
   39: push 9
   40: add
   41: add
   42: push 10
   43: assign
# test/typefail.p, 24: 
# test/typefail.p, 25: 	a2[one] := 1;
   44: pushvar 0, 16
   45: pushvar 0, 4
   46: eval
   47: add
   48: push 1
   49: assign
# test/typefail.p, 26: 	a2[2] := 2;				{	error: got integer, expected enum		}
   50: pushvar 0, 16
   51: push 2
   52: add
   53: push 2
   54: assign
# test/typefail.p, 27: 	a2[two + 1] := 3		{	error: expected enum, got integer		}
   55: pushvar 0, 16
   56: pushvar 0, 5
   57: eval
   58: push 1
   59: add
   60: add
   61: push 3
# test/typefail.p, 28: end .
   62: assign
   63: ret

