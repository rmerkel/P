./pas: incompatable binary types near line 14
./pas: incompatable array index type, expected Enumeration got Integer near line 26
./pas: incompatable binary types near line 27
# test/typefail.p, 1: { Test advanced types, fail	}
# test/typefail.p, 2: program typefail ;
# test/typefail.p, 3: type
    0: call 0, 2
    1: halt
# test/typefail.p, 4: 	rng = 0..9;
# test/typefail.p, 5: 	enum = (	one, two, three	);
# test/typefail.p, 6: 
# test/typefail.p, 7: var
# test/typefail.p, 8: 	i : Integer;
# test/typefail.p, 9: 	r : rng;
# test/typefail.p, 10: 	a : array[rng] of Integer;
# test/typefail.p, 11: 	a2 : array [enum] of Integer;
# test/typefail.p, 12: 
# test/typefail.p, 13: begin
    2: enter 16
# test/typefail.p, 14: 	i := one;				{	error: expected Integer, got enum		}
    3: pushvar 0, 4
    4: push 0
    5: assign
# test/typefail.p, 15: 
# test/typefail.p, 16: 	r := 0;
    6: pushvar 0, 5
    7: push 0
    8: assign
# test/typefail.p, 17: 	while r < 10 do begin 	{	*** warning: condition might always be true	}
    9: pushvar 0, 5
   10: eval
   11: push 10
   12: lt
   13: jneq 28
# test/typefail.p, 18: 		a[r] := r;
   14: pushvar 0, 6
   15: pushvar 0, 5
   16: eval
   17: add
   18: pushvar 0, 5
   19: eval
   20: assign
# test/typefail.p, 19: 		r := r + 1
   21: pushvar 0, 5
   22: pushvar 0, 5
   23: eval
   24: push 1
# test/typefail.p, 20: 	end;
   25: add
   26: assign
   27: jump 9
# test/typefail.p, 21: 	r := 10;				{	*** error: out-of-range/range check error	}
   28: pushvar 0, 5
   29: push 10
   30: assign
# test/typefail.p, 22: 	a[10] := 10;			{	*** error: out-of-range/range check error	}
   31: pushvar 0, 6
   32: push 10
   33: add
   34: push 10
   35: assign
# test/typefail.p, 23: 	a[1+9] := 10;			{	*** error: out-of-range/range check error	}
   36: pushvar 0, 6
   37: push 1
   38: push 9
   39: add
   40: add
   41: push 10
   42: assign
# test/typefail.p, 24: 
# test/typefail.p, 25: 	a2[one] := 1;
   43: pushvar 0, 16
   44: push 0
   45: add
   46: push 1
   47: assign
# test/typefail.p, 26: 	a2[2] := 2;				{	error: got Integer, expected enum		}
   48: pushvar 0, 16
   49: push 2
   50: add
   51: push 2
   52: assign
# test/typefail.p, 27: 	a2[two + 1] := 3		{	error: expected enum, got Integer		}
   53: pushvar 0, 16
   54: push 1
   55: push 1
   56: add
   57: add
   58: push 3
# test/typefail.p, 28: end .
   59: assign
   60: ret

