# test/pointers.p, 1: program PointerTest ;
# test/pointers.p, 2: var
    0: push 0
    1: push 4
    2: call
    3: halt
# test/pointers.p, 3: 	xp : ^integer;
# test/pointers.p, 4: 
# test/pointers.p, 5: begin
    4: enter 1
# test/pointers.p, 6: 	xp := nil;
    5: pushvar 0, 4
    6: push 0
    7: assign 1
# test/pointers.p, 7: 	writeln(xp);
    8: pushvar 0, 4
    9: eval 1
   10: push 1
   11: push 0
   12: push 0
   13: push 1
   14: writeln
# test/pointers.p, 8: 
# test/pointers.p, 9: 	new(xp);
   15: pushvar 0, 4
   16: push 1
   17: new
   18: assign 1
# test/pointers.p, 10: 	writeln(xp);
   19: pushvar 0, 4
   20: eval 1
   21: push 1
   22: push 0
   23: push 0
   24: push 1
   25: writeln
# test/pointers.p, 11: 	if xp <> nil then begin
   26: pushvar 0, 4
   27: eval 1
   28: push 0
   29: neq
   30: push 44
   31: jneq
# test/pointers.p, 12: 		xp^ := 2048;
   32: pushvar 0, 4
   33: eval 1
   34: push 2048
   35: assign 1
# test/pointers.p, 13: 		writeln(xp^)
   36: pushvar 0, 4
   37: eval 1
   38: eval 1
   39: push 1
   40: push 0
   41: push 0
# test/pointers.p, 14: 	end;
   42: push 1
   43: writeln
# test/pointers.p, 15: 
# test/pointers.p, 16: 	xp^ := 0;
   44: pushvar 0, 4
   45: eval 1
   46: push 0
   47: assign 1
# test/pointers.p, 17: 	dispose(xp)
   48: pushvar 0, 4
   49: eval 1
   50: dispose
# test/pointers.p, 18: end .
   51: ret

0
1024
2048
