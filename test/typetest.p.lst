# test/typetest.p, 1: { Test advanced types	}
# test/typetest.p, 2: program typetest;
# test/typetest.p, 3: type
    0: call 0, 2
    1: halt
# test/typetest.p, 4: 	int = Integer;
# test/typetest.p, 5: 	rng = 1..10;
# test/typetest.p, 6: 	enum = (	one, two, three	);
# test/typetest.p, 7: 
# test/typetest.p, 8: var
# test/typetest.p, 9: 	i : int;
# test/typetest.p, 10: 	j : Integer;
# test/typetest.p, 11: 	r : rng;
# test/typetest.p, 12: 	a : array[rng] of Integer;
# test/typetest.p, 13: 	a2 : array [enum] of int;
# test/typetest.p, 14: 	a3 : array [0..4] of array [0..4] of Real;
# test/typetest.p, 15: 
# test/typetest.p, 16: begin
    2: enter 42
# test/typetest.p, 17: 	i := 1; i := i + 1;
    3: pushvar 0, 4
    4: push 1
    5: assign
    6: pushvar 0, 4
    7: pushvar 0, 4
    8: eval
    9: push 1
   10: add
   11: assign
# test/typetest.p, 18: 	r := 1; r := r + 1;
   12: pushvar 0, 6
   13: push 1
   14: assign
   15: pushvar 0, 6
   16: pushvar 0, 6
   17: eval
   18: push 1
   19: add
   20: assign
# test/typetest.p, 19: 
# test/typetest.p, 20: 	i := 1;	{	fill a[] with its index	}
   21: pushvar 0, 4
   22: push 1
   23: assign
# test/typetest.p, 21:  	while i < 11 do begin 
   24: pushvar 0, 4
   25: eval
   26: push 11
   27: lt
   28: jneq 45
# test/typetest.p, 22: 		a[i] := i;
   29: pushvar 0, 7
   30: pushvar 0, 4
   31: eval
   32: push 1
   33: sub
   34: add
   35: pushvar 0, 4
   36: eval
   37: assign
# test/typetest.p, 23: 		i := i + 1
   38: pushvar 0, 4
   39: pushvar 0, 4
   40: eval
   41: push 1
# test/typetest.p, 24: 	end;
   42: add
   43: assign
   44: jump 24
# test/typetest.p, 25: 
# test/typetest.p, 26: 	r := 1;	{	multiply by 10			}
   45: pushvar 0, 6
   46: push 1
   47: assign
# test/typetest.p, 27: 	repeat begin
# test/typetest.p, 28: 		a[r] := a[r] * 10;
   48: pushvar 0, 7
   49: pushvar 0, 6
   50: eval
   51: push 1
   52: sub
   53: add
   54: pushvar 0, 7
   55: pushvar 0, 6
   56: eval
   57: push 1
   58: sub
   59: add
   60: eval
   61: push 10
   62: mul
   63: assign
# test/typetest.p, 29: 		r := r + 1
   64: pushvar 0, 6
   65: pushvar 0, 6
   66: eval
   67: push 1
# test/typetest.p, 30: 	end until r = 11;
   68: add
   69: assign
   70: pushvar 0, 6
   71: eval
   72: push 11
   73: equ
   74: jneq 48
# test/typetest.p, 31: 
# test/typetest.p, 32: 	a2[one]	:= 1;
   75: pushvar 0, 17
   76: push 0
   77: add
   78: push 1
   79: assign
# test/typetest.p, 33: 	a2[two]	:= 2;
   80: pushvar 0, 17
   81: push 1
   82: add
   83: push 2
   84: assign
# test/typetest.p, 34: 	a2[three] := 3;
   85: pushvar 0, 17
   86: push 2
   87: add
   88: push 3
   89: assign
# test/typetest.p, 35: 
# test/typetest.p, 36: 	i := 0;	{	fill a3[] with it's index	}
   90: pushvar 0, 4
   91: push 0
   92: assign
# test/typetest.p, 37: 	while (i < 5) do begin
   93: pushvar 0, 4
   94: eval
   95: push 5
   96: lt
   97: jneq 138
# test/typetest.p, 38: 		j := 0;
   98: pushvar 0, 5
   99: push 0
  100: assign
# test/typetest.p, 39: 		while (j < 5) do begin
  101: pushvar 0, 5
  102: eval
  103: push 5
  104: lt
  105: jneq 131
# test/typetest.p, 40: 			a3[i][j] := 1.0 * (i + j);
  106: pushvar 0, 21
  107: pushvar 0, 4
  108: eval
  109: push 5
  110: mul
  111: add
  112: pushvar 0, 5
  113: eval
  114: add
  115: push 1.000000
  116: pushvar 0, 4
  117: eval
  118: pushvar 0, 5
  119: eval
  120: add
  121: itor
  122: mul
  123: assign
# test/typetest.p, 41: 			j := j + 1
  124: pushvar 0, 5
  125: pushvar 0, 5
  126: eval
  127: push 1
# test/typetest.p, 42: 		end;
  128: add
  129: assign
  130: jump 101
# test/typetest.p, 43: 		i := i + 1
  131: pushvar 0, 4
  132: pushvar 0, 4
  133: eval
  134: push 1
# test/typetest.p, 44: 	end
  135: add
  136: assign
# test/typetest.p, 45: end .
  137: jump 93
  138: ret

        8:          1
        8:          2
       10:          1
       10:          2
        8:          1
       11:          1
        8:          2
       12:          2
        8:          3
       13:          3
        8:          4
       14:          4
        8:          5
       15:          5
        8:          6
       16:          6
        8:          7
       17:          7
        8:          8
       18:          8
        8:          9
       19:          9
        8:         10
       20:         10
        8:         11
       10:          1
       11:         10
       10:          2
       12:         20
       10:          3
       13:         30
       10:          4
       14:         40
       10:          5
       15:         50
       10:          6
       16:         60
       10:          7
       17:         70
       10:          8
       18:         80
       10:          9
       19:         90
       10:         10
       20:        100
       10:         11
       21:          1
       22:          2
       23:          3
        8:          0
        9:          0
       25:   0.000000
        9:          1
       26:   1.000000
        9:          2
       27:   2.000000
        9:          3
       28:   3.000000
        9:          4
       29:   4.000000
        9:          5
        8:          1
        9:          0
       30:   1.000000
        9:          1
       31:   2.000000
        9:          2
       32:   3.000000
        9:          3
       33:   4.000000
        9:          4
       34:   5.000000
        9:          5
        8:          2
        9:          0
       35:   2.000000
        9:          1
       36:   3.000000
        9:          2
       37:   4.000000
        9:          3
       38:   5.000000
        9:          4
       39:   6.000000
        9:          5
        8:          3
        9:          0
       40:   3.000000
        9:          1
       41:   4.000000
        9:          2
       42:   5.000000
        9:          3
       43:   6.000000
        9:          4
       44:   7.000000
        9:          5
        8:          4
        9:          0
       45:   4.000000
        9:          1
       46:   5.000000
        9:          2
       47:   6.000000
        9:          3
       48:   7.000000
        9:          4
       49:   8.000000
        9:          5
        8:          5
