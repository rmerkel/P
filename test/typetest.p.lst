# test/typetest.p, 2: { Test advanced types	}
# test/typetest.p, 3: program typetest;
# test/typetest.p, 4: type
    0: call 0, 2
    1: halt
# test/typetest.p, 5: 	int = integer;
# test/typetest.p, 6: 	rng = 0..9;
# test/typetest.p, 7: 	enum = (	one, two, three	);
# test/typetest.p, 8: 
# test/typetest.p, 9: var
# test/typetest.p, 10: 	i : int;
# test/typetest.p, 11: 	r : rng;
# test/typetest.p, 12: 	a : array[rng] of integer;
# test/typetest.p, 13: 	a2 : array [enum] of int;
# test/typetest.p, 14: 
# test/typetest.p, 15: begin
    2: enter 16
# test/typetest.p, 16: 	i := 0; i := i + 1;
    3: pushvar 0, 4
    4: push 0
    5: assign
    6: pushvar 0, 4
    7: pushvar 0, 4
    8: eval
    9: push 1
   10: add
   11: assign
# test/typetest.p, 17: 	r := 0; r := r + 1;
   12: pushvar 0, 5
   13: push 0
   14: assign
   15: pushvar 0, 5
   16: pushvar 0, 5
   17: eval
   18: push 1
   19: add
   20: assign
# test/typetest.p, 18: 
# test/typetest.p, 19: 	i := 0;	{	fill a[] with its index	}
   21: pushvar 0, 4
   22: push 0
   23: assign
# test/typetest.p, 20:  	while i < 10 do begin 
   24: pushvar 0, 4
   25: eval
   26: push 10
   27: lt
   28: jneq 43
# test/typetest.p, 21: 		a[i] := i;
   29: pushvar 0, 6
   30: pushvar 0, 4
   31: eval
   32: add
   33: pushvar 0, 4
   34: eval
   35: assign
# test/typetest.p, 22: 		i := i + 1
   36: pushvar 0, 4
   37: pushvar 0, 4
   38: eval
   39: push 1
# test/typetest.p, 23: 	end;
   40: add
   41: assign
   42: jump 24
# test/typetest.p, 24: 
# test/typetest.p, 25: 	r := 0;	{	multiply by 10			}
   43: pushvar 0, 5
   44: push 0
   45: assign
# test/typetest.p, 26: 	repeat begin
# test/typetest.p, 27: 		a[r] := a[r] * 10;
   46: pushvar 0, 6
   47: pushvar 0, 5
   48: eval
   49: add
   50: pushvar 0, 6
   51: pushvar 0, 5
   52: eval
   53: add
   54: eval
   55: push 10
   56: mul
   57: assign
# test/typetest.p, 28: 		r := r + 1
   58: pushvar 0, 5
   59: pushvar 0, 5
   60: eval
   61: push 1
# test/typetest.p, 29: 	end until r = 9;
   62: add
   63: assign
   64: pushvar 0, 5
   65: eval
   66: push 9
   67: equ
   68: jneq 46
# test/typetest.p, 30: 
# test/typetest.p, 31: 	a2[one]	:= 1;
   69: pushvar 0, 7
   70: pushvar 0, 4
   71: eval
   72: add
   73: push 1
   74: assign
# test/typetest.p, 32: 	a2[two]	:= 2;
   75: pushvar 0, 7
   76: pushvar 0, 5
   77: eval
   78: add
   79: push 2
   80: assign
# test/typetest.p, 33: 	a2[three] := 3
   81: pushvar 0, 7
   82: pushvar 0, 6
   83: eval
   84: add
   85: push 3
# test/typetest.p, 34: end .
   86: assign
   87: ret

        8:          0
        8:          1
        9:          0
        9:          1
        8:          0
       10:          0
        8:          1
       11:          1
        8:          2
       12:          2
        8:          3
       13:          3
        8:          4
       14:          4
        8:          5
       15:          5
        8:          6
       16:          6
        8:          7
       17:          7
        8:          8
       18:          8
        8:          9
       19:          9
        8:         10
        9:          0
       10:          0
        9:          1
       11:         10
        9:          2
       12:         20
        9:          3
       13:         30
        9:          4
       14:         40
        9:          5
       15:         50
        9:          6
       16:         60
        9:          7
       17:         70
        9:          8
       18:         80
        9:          9
       21:          1
       20:          2
       11:          3
