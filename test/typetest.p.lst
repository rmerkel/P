# test/typetest.p, 1: { Test advanced types	}
# test/typetest.p, 2: program typetest() is
# test/typetest.p, 3: type
    0: calli 0, 2
    1: halt
# test/typetest.p, 4: 	int is integer;
# test/typetest.p, 5: 	rng is 1..10;
# test/typetest.p, 6: 	enum is (	one, two, three	);
# test/typetest.p, 7: 
# test/typetest.p, 8: var
# test/typetest.p, 9: 	i : int;
# test/typetest.p, 10: 	j : integer;
# test/typetest.p, 11: 	r : rng;
# test/typetest.p, 12: 	a : array[rng] of integer;
# test/typetest.p, 13: 	a2 : array [enum] of int;
# test/typetest.p, 14: 	a3 : array [0..4] of array [0..4] of real;
# test/typetest.p, 15: 
# test/typetest.p, 16: begin
    2: enter 41
# test/typetest.p, 17: 	i := 1; i := i + 1;
    3: pushvar 0, 4
    4: push 1
    5: assign 1
    6: pushvar 0, 4
    7: pushvar 0, 4
    8: eval 1
    9: push 1
   10: add
   11: assign 1
# test/typetest.p, 18: 	r := 1; r := r + 1;
   12: pushvar 0, 6
   13: push 1
   14: llimit 1
   15: ulimit 10
   16: assign 1
   17: pushvar 0, 6
   18: pushvar 0, 6
   19: eval 1
   20: push 1
   21: add
   22: llimit 1
   23: ulimit 10
   24: assign 1
# test/typetest.p, 19: 
# test/typetest.p, 20: 	i := 1;	{	fill a[] with its index	}
   25: pushvar 0, 4
   26: push 1
   27: assign 1
# test/typetest.p, 21:  	while i < 11 loop 
   28: pushvar 0, 4
   29: eval 1
   30: push 11
   31: lt
   32: jneqi 64
# test/typetest.p, 22: 		a[i] := i;
   33: pushvar 0, 7
   34: pushvar 0, 4
   35: eval 1
   36: llimit 1
   37: ulimit 10
   38: push 1
   39: sub
   40: add
   41: pushvar 0, 4
   42: eval 1
   43: assign 1
# test/typetest.p, 23: 		putln(a[i]);
   44: pushvar 0, 7
   45: pushvar 0, 4
   46: eval 1
   47: llimit 1
   48: ulimit 10
   49: push 1
   50: sub
   51: add
   52: eval 1
   53: push 1
   54: push 0
   55: push 0
   56: putln
# test/typetest.p, 24: 		i := i + 1
   57: pushvar 0, 4
   58: pushvar 0, 4
   59: eval 1
   60: push 1
# test/typetest.p, 25: 	endloop;
   61: add
   62: assign 1
   63: jumpi 28
# test/typetest.p, 26: 
# test/typetest.p, 27: 	r := 1;	{	multiply by 10			}
   64: pushvar 0, 6
   65: push 1
   66: llimit 1
   67: ulimit 10
   68: assign 1
# test/typetest.p, 28: 	repeat
# test/typetest.p, 29: 		a[r] := a[r] * 10;
   69: pushvar 0, 7
   70: pushvar 0, 6
   71: eval 1
   72: llimit 1
   73: ulimit 10
   74: push 1
   75: sub
   76: add
   77: pushvar 0, 7
   78: pushvar 0, 6
   79: eval 1
   80: llimit 1
   81: ulimit 10
   82: push 1
   83: sub
   84: add
   85: eval 1
   86: push 10
   87: mul
   88: assign 1
# test/typetest.p, 30: 		putln(a[r]);
   89: pushvar 0, 7
   90: pushvar 0, 6
   91: eval 1
   92: llimit 1
   93: ulimit 10
   94: push 1
   95: sub
   96: add
   97: eval 1
   98: push 1
   99: push 0
  100: push 0
  101: putln
# test/typetest.p, 31: 		r := r + 1
  102: pushvar 0, 6
  103: pushvar 0, 6
  104: eval 1
  105: push 1
# test/typetest.p, 32: 	until r = 10 endloop;
  106: add
  107: llimit 1
  108: ulimit 10
  109: assign 1
  110: pushvar 0, 6
  111: eval 1
  112: push 10
  113: equ
  114: jneqi 69
# test/typetest.p, 33: 
# test/typetest.p, 34: 	a2[one]	:= 1;
  115: pushvar 0, 17
  116: push 0
  117: llimit 0
  118: ulimit 2
  119: add
  120: push 1
  121: assign 1
# test/typetest.p, 35: 	a2[two]	:= 2;
  122: pushvar 0, 17
  123: push 1
  124: llimit 0
  125: ulimit 2
  126: add
  127: push 2
  128: assign 1
# test/typetest.p, 36: 	a2[three] := 3;
  129: pushvar 0, 17
  130: push 2
  131: llimit 0
  132: ulimit 2
  133: add
  134: push 3
  135: assign 1
# test/typetest.p, 37: 	put(a2[one]);
  136: pushvar 0, 17
  137: push 0
  138: llimit 0
  139: ulimit 2
  140: add
  141: eval 1
  142: push 1
  143: push 0
  144: push 0
  145: put
# test/typetest.p, 38: 	put(a2[two]);
  146: pushvar 0, 17
  147: push 1
  148: llimit 0
  149: ulimit 2
  150: add
  151: eval 1
  152: push 1
  153: push 0
  154: push 0
  155: put
# test/typetest.p, 39: 	putln(a2[three]);
  156: pushvar 0, 17
  157: push 2
  158: llimit 0
  159: ulimit 2
  160: add
  161: eval 1
  162: push 1
  163: push 0
  164: push 0
  165: putln
# test/typetest.p, 40: 
# test/typetest.p, 41: 	i := 0;	{	fill a3[] with it's index	}
  166: pushvar 0, 4
  167: push 0
  168: assign 1
# test/typetest.p, 42: 	while (i < 5) loop
  169: pushvar 0, 4
  170: eval 1
  171: push 5
  172: lt
  173: jneqi 240
# test/typetest.p, 43: 		j := 0;
  174: pushvar 0, 5
  175: push 0
  176: assign 1
# test/typetest.p, 44: 		while (j < 5) loop
  177: pushvar 0, 5
  178: eval 1
  179: push 5
  180: lt
  181: jneqi 229
# test/typetest.p, 45: 			a3[i][j] := 1.0 * (i + j);
  182: pushvar 0, 20
  183: pushvar 0, 4
  184: eval 1
  185: llimit 0
  186: ulimit 4
  187: push 5
  188: mul
  189: add
  190: pushvar 0, 5
  191: eval 1
  192: llimit 0
  193: ulimit 4
  194: add
  195: push 1.000000
  196: pushvar 0, 4
  197: eval 1
  198: pushvar 0, 5
  199: eval 1
  200: add
  201: itor
  202: mul
  203: assign 1
# test/typetest.p, 46: 			put(a3[i][j], 7, 4);
  204: pushvar 0, 20
  205: pushvar 0, 4
  206: eval 1
  207: llimit 0
  208: ulimit 4
  209: push 5
  210: mul
  211: add
  212: pushvar 0, 5
  213: eval 1
  214: llimit 0
  215: ulimit 4
  216: add
  217: eval 1
  218: push 1
  219: push 7
  220: push 4
  221: put
# test/typetest.p, 47: 			j := j + 1
  222: pushvar 0, 5
  223: pushvar 0, 5
  224: eval 1
  225: push 1
# test/typetest.p, 48: 		endloop;
  226: add
  227: assign 1
  228: jumpi 177
# test/typetest.p, 49: 		putln();
  229: push 0
  230: push 0
  231: push 0
  232: putln
# test/typetest.p, 50: 		i := i + 1
  233: pushvar 0, 4
  234: pushvar 0, 4
  235: eval 1
  236: push 1
# test/typetest.p, 51: 	endloop
  237: add
  238: assign 1
# test/typetest.p, 52: endprog
  239: jumpi 169
# test/typetest.p, 53: 
  240: ret

1
2
3
4
5
6
7
8
9
10
10
20
30
40
50
60
70
80
90
123
 0.0000 1.0000 2.0000 3.0000 4.0000
 1.0000 2.0000 3.0000 4.0000 5.0000
 2.0000 3.0000 4.0000 5.0000 6.0000
 3.0000 4.0000 5.0000 6.0000 7.0000
 4.0000 5.0000 6.0000 7.0000 8.0000
