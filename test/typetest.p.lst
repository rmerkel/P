# test/typetest.p, 1: { Test advanced types	}
# test/typetest.p, 2: program typetest() is
# test/typetest.p, 3: type
    0: calli 0, 2
    1: halt
# test/typetest.p, 4: 	int is integer;
# test/typetest.p, 5: 	rng is 1..10;
# test/typetest.p, 6: 	enum is (	one, two, three	);
# test/typetest.p, 7: 
# test/typetest.p, 8: var
# test/typetest.p, 9: 	i : int;
# test/typetest.p, 10: 	j : integer;
# test/typetest.p, 11: 	r : rng;
# test/typetest.p, 12: 	a : array[rng] of integer;
# test/typetest.p, 13: 	a2 : array [enum] of int;
# test/typetest.p, 14: 	a3 : array [0..4] of array [0..4] of real;
# test/typetest.p, 15: 
# test/typetest.p, 16: begin
    2: enter 41
# test/typetest.p, 17: 	i := 1; i := i + 1;
    3: pushvar 0, 4
    4: push 1
    5: assign 1
    6: pushvar 0, 4
    7: pushvar 0, 4
    8: eval 1
    9: push 1
   10: add
   11: assign 1
# test/typetest.p, 18: 	r := 1; r := r + 1;
   12: pushvar 0, 6
   13: push 1
   14: llimit 1
   15: ulimit 10
   16: assign 1
   17: pushvar 0, 6
   18: pushvar 0, 6
   19: eval 1
   20: push 1
   21: add
   22: llimit 1
   23: ulimit 10
   24: assign 1
# test/typetest.p, 19: 
# test/typetest.p, 20: 	i := 1;	{	fill a[] with its index	}
   25: pushvar 0, 4
   26: push 1
   27: assign 1
# test/typetest.p, 21:  	while i < 11 loop 
   28: pushvar 0, 4
   29: eval 1
   30: push 11
   31: lt
   32: jneqi 69
# test/typetest.p, 22: 		a[i] := i;
   33: pushvar 0, 7
   34: pushvar 0, 4
   35: eval 1
   36: llimit 1
   37: ulimit 10
   38: push 1
   39: sub
   40: add
   41: pushvar 0, 4
   42: eval 1
   43: assign 1
# test/typetest.p, 23: 		writeln(a[i]);
   44: pushvar 0, 7
   45: pushvar 0, 4
   46: eval 1
   47: llimit 1
   48: ulimit 10
   49: push 1
   50: sub
   51: add
   52: eval 1
   53: push 1
   54: push 0
   55: push 0
   56: put
   57: push '
'
   58: push 1
   59: push 0
   60: push 0
   61: put
# test/typetest.p, 24: 		i := i + 1
   62: pushvar 0, 4
   63: pushvar 0, 4
   64: eval 1
   65: push 1
# test/typetest.p, 25: 	endloop;
   66: add
   67: assign 1
   68: jumpi 28
# test/typetest.p, 26: 
# test/typetest.p, 27: 	r := 1;	{	multiply by 10			}
   69: pushvar 0, 6
   70: push 1
   71: llimit 1
   72: ulimit 10
   73: assign 1
# test/typetest.p, 28: 	repeat
# test/typetest.p, 29: 		a[r] := a[r] * 10;
   74: pushvar 0, 7
   75: pushvar 0, 6
   76: eval 1
   77: llimit 1
   78: ulimit 10
   79: push 1
   80: sub
   81: add
   82: pushvar 0, 7
   83: pushvar 0, 6
   84: eval 1
   85: llimit 1
   86: ulimit 10
   87: push 1
   88: sub
   89: add
   90: eval 1
   91: push 10
   92: mul
   93: assign 1
# test/typetest.p, 30: 		writeln(a[r]);
   94: pushvar 0, 7
   95: pushvar 0, 6
   96: eval 1
   97: llimit 1
   98: ulimit 10
   99: push 1
  100: sub
  101: add
  102: eval 1
  103: push 1
  104: push 0
  105: push 0
  106: put
  107: push '
'
  108: push 1
  109: push 0
  110: push 0
  111: put
# test/typetest.p, 31: 		r := r + 1
  112: pushvar 0, 6
  113: pushvar 0, 6
  114: eval 1
  115: push 1
# test/typetest.p, 32: 	until r = 10 endloop;
  116: add
  117: llimit 1
  118: ulimit 10
  119: assign 1
  120: pushvar 0, 6
  121: eval 1
  122: push 10
  123: equ
  124: jneqi 74
# test/typetest.p, 33: 
# test/typetest.p, 34: 	a2[one]	:= 1;
  125: pushvar 0, 17
  126: push 0
  127: llimit 0
  128: ulimit 2
  129: add
  130: push 1
  131: assign 1
# test/typetest.p, 35: 	a2[two]	:= 2;
  132: pushvar 0, 17
  133: push 1
  134: llimit 0
  135: ulimit 2
  136: add
  137: push 2
  138: assign 1
# test/typetest.p, 36: 	a2[three] := 3;
  139: pushvar 0, 17
  140: push 2
  141: llimit 0
  142: ulimit 2
  143: add
  144: push 3
  145: assign 1
# test/typetest.p, 37: 	writeln(a2[one], a2[two], a2[three]);
  146: pushvar 0, 17
  147: push 0
  148: llimit 0
  149: ulimit 2
  150: add
  151: eval 1
  152: push 1
  153: push 0
  154: push 0
  155: put
  156: pushvar 0, 17
  157: push 1
  158: llimit 0
  159: ulimit 2
  160: add
  161: eval 1
  162: push 1
  163: push 0
  164: push 0
  165: put
  166: pushvar 0, 17
  167: push 2
  168: llimit 0
  169: ulimit 2
  170: add
  171: eval 1
  172: push 1
  173: push 0
  174: push 0
  175: put
  176: push '
'
  177: push 1
  178: push 0
  179: push 0
  180: put
# test/typetest.p, 38: 
# test/typetest.p, 39: 	i := 0;	{	fill a3[] with it's index	}
  181: pushvar 0, 4
  182: push 0
  183: assign 1
# test/typetest.p, 40: 	while (i < 5) loop
  184: pushvar 0, 4
  185: eval 1
  186: push 5
  187: lt
  188: jneqi 256
# test/typetest.p, 41: 		j := 0;
  189: pushvar 0, 5
  190: push 0
  191: assign 1
# test/typetest.p, 42: 		while (j < 5) loop
  192: pushvar 0, 5
  193: eval 1
  194: push 5
  195: lt
  196: jneqi 244
# test/typetest.p, 43: 			a3[i][j] := 1.0 * (i + j);
  197: pushvar 0, 20
  198: pushvar 0, 4
  199: eval 1
  200: llimit 0
  201: ulimit 4
  202: push 5
  203: mul
  204: add
  205: pushvar 0, 5
  206: eval 1
  207: llimit 0
  208: ulimit 4
  209: add
  210: push 1.000000
  211: pushvar 0, 4
  212: eval 1
  213: pushvar 0, 5
  214: eval 1
  215: add
  216: itor
  217: mul
  218: assign 1
# test/typetest.p, 44: 			write(a3[i][j] : 7 : 4);
  219: pushvar 0, 20
  220: pushvar 0, 4
  221: eval 1
  222: llimit 0
  223: ulimit 4
  224: push 5
  225: mul
  226: add
  227: pushvar 0, 5
  228: eval 1
  229: llimit 0
  230: ulimit 4
  231: add
  232: eval 1
  233: push 1
  234: push 7
  235: push 4
  236: put
# test/typetest.p, 45: 			j := j + 1
  237: pushvar 0, 5
  238: pushvar 0, 5
  239: eval 1
  240: push 1
# test/typetest.p, 46: 		endloop;
  241: add
  242: assign 1
  243: jumpi 192
# test/typetest.p, 47: 		writeln;
  244: push '
'
  245: push 1
  246: push 0
  247: push 0
  248: put
# test/typetest.p, 48: 		i := i + 1
  249: pushvar 0, 4
  250: pushvar 0, 4
  251: eval 1
  252: push 1
# test/typetest.p, 49: 	endloop
  253: add
  254: assign 1
# test/typetest.p, 50: endprog
  255: jumpi 184
# test/typetest.p, 51: 
  256: ret

1
2
3
4
5
6
7
8
9
10
10
20
30
40
50
60
70
80
90
123
 0.0000 1.0000 2.0000 3.0000 4.0000
 1.0000 2.0000 3.0000 4.0000 5.0000
 2.0000 3.0000 4.0000 5.0000 6.0000
 3.0000 4.0000 5.0000 6.0000 7.0000
 4.0000 5.0000 6.0000 7.0000 8.0000
