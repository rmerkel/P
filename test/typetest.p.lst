# test/typetest.p, 1: { Test advanced types	}
# test/typetest.p, 2: program typetest;
# test/typetest.p, 3: type
    0: call 0, 2
    1: halt
# test/typetest.p, 4: 	int = integer;
# test/typetest.p, 5: 	rng = 1..10;
# test/typetest.p, 6: 	enum = (	one, two, three	);
# test/typetest.p, 7: 
# test/typetest.p, 8: var
# test/typetest.p, 9: 	i : int;
# test/typetest.p, 10: 	j : integer;
# test/typetest.p, 11: 	r : rng;
# test/typetest.p, 12: 	a : array[rng] of integer;
# test/typetest.p, 13: 	a2 : array [enum] of int;
# test/typetest.p, 14: 	a3 : array [0..4] of array [0..4] of real;
# test/typetest.p, 15: 
# test/typetest.p, 16: begin
    2: enter 41
# test/typetest.p, 17: 	i := 1; i := i + 1;
    3: pushvar 0, 4
    4: push 1
    5: assign 1
    6: pushvar 0, 4
    7: pushvar 0, 4
    8: eval 1
    9: push 1
   10: add
   11: assign 1
# test/typetest.p, 18: 	r := 1; r := r + 1;
   12: pushvar 0, 6
   13: push 1
   14: llimit 1
   15: ulimit 10
   16: assign 1
   17: pushvar 0, 6
   18: pushvar 0, 6
   19: eval 1
   20: push 1
   21: add
   22: llimit 1
   23: ulimit 10
   24: assign 1
# test/typetest.p, 19: 
# test/typetest.p, 20: 	i := 1;	{	fill a[] with its index	}
   25: pushvar 0, 4
   26: push 1
   27: assign 1
# test/typetest.p, 21:  	while i < 11 do begin 
   28: pushvar 0, 4
   29: eval 1
   30: push 11
   31: lt
   32: jneq 51
# test/typetest.p, 22: 		a[i] := i;
   33: pushvar 0, 7
   34: pushvar 0, 4
   35: eval 1
   36: llimit 1
   37: ulimit 10
   38: push 1
   39: sub
   40: add
   41: pushvar 0, 4
   42: eval 1
   43: assign 1
# test/typetest.p, 23: 		i := i + 1
   44: pushvar 0, 4
   45: pushvar 0, 4
   46: eval 1
   47: push 1
# test/typetest.p, 24: 	end;
   48: add
   49: assign 1
   50: jump 28
# test/typetest.p, 25: 
# test/typetest.p, 26: 	r := 1;	{	multiply by 10			}
   51: pushvar 0, 6
   52: push 1
   53: llimit 1
   54: ulimit 10
   55: assign 1
# test/typetest.p, 27: 	repeat begin
# test/typetest.p, 28: 		a[r] := a[r] * 10;
   56: pushvar 0, 7
   57: pushvar 0, 6
   58: eval 1
   59: llimit 1
   60: ulimit 10
   61: push 1
   62: sub
   63: add
   64: pushvar 0, 7
   65: pushvar 0, 6
   66: eval 1
   67: llimit 1
   68: ulimit 10
   69: push 1
   70: sub
   71: add
   72: eval 1
   73: push 10
   74: mul
   75: assign 1
# test/typetest.p, 29: 		r := r + 1
   76: pushvar 0, 6
   77: pushvar 0, 6
   78: eval 1
   79: push 1
# test/typetest.p, 30: 	end until r = 11;
   80: add
   81: llimit 1
   82: ulimit 10
   83: assign 1
   84: pushvar 0, 6
   85: eval 1
   86: push 11
   87: equ
   88: jneq 56
# test/typetest.p, 31: 
# test/typetest.p, 32: 	a2[one]	:= 1;
   89: pushvar 0, 17
   90: push 0
   91: llimit 0
   92: ulimit 2
   93: add
   94: push 1
   95: assign 1
# test/typetest.p, 33: 	a2[two]	:= 2;
   96: pushvar 0, 17
   97: push 1
   98: llimit 0
   99: ulimit 2
  100: add
  101: push 2
  102: assign 1
# test/typetest.p, 34: 	a2[three] := 3;
  103: pushvar 0, 17
  104: push 2
  105: llimit 0
  106: ulimit 2
  107: add
  108: push 3
  109: assign 1
# test/typetest.p, 35: 
# test/typetest.p, 36: 	i := 0;	{	fill a3[] with it's index	}
  110: pushvar 0, 4
  111: push 0
  112: assign 1
# test/typetest.p, 37: 	while (i < 5) do begin
  113: pushvar 0, 4
  114: eval 1
  115: push 5
  116: lt
  117: jneq 162
# test/typetest.p, 38: 		j := 0;
  118: pushvar 0, 5
  119: push 0
  120: assign 1
# test/typetest.p, 39: 		while (j < 5) do begin
  121: pushvar 0, 5
  122: eval 1
  123: push 5
  124: lt
  125: jneq 155
# test/typetest.p, 40: 			a3[i][j] := 1.0 * (i + j);
  126: pushvar 0, 20
  127: pushvar 0, 4
  128: eval 1
  129: llimit 0
  130: ulimit 4
  131: push 5
  132: mul
  133: add
  134: pushvar 0, 5
  135: eval 1
  136: llimit 0
  137: ulimit 4
  138: add
  139: push 1.000000
  140: pushvar 0, 4
  141: eval 1
  142: pushvar 0, 5
  143: eval 1
  144: add
  145: itor
  146: mul
  147: assign 1
# test/typetest.p, 41: 			j := j + 1
  148: pushvar 0, 5
  149: pushvar 0, 5
  150: eval 1
  151: push 1
# test/typetest.p, 42: 		end;
  152: add
  153: assign 1
  154: jump 121
# test/typetest.p, 43: 		i := i + 1
  155: pushvar 0, 4
  156: pushvar 0, 4
  157: eval 1
  158: push 1
# test/typetest.p, 44: 	end
  159: add
  160: assign 1
# test/typetest.p, 45: end .
  161: jump 113
  162: ret

        8:          1
        8:          2
       10:          1
       10:          2
        8:          1
       11:          1
        8:          2
       12:          2
        8:          3
       13:          3
        8:          4
       14:          4
        8:          5
       15:          5
        8:          6
       16:          6
        8:          7
       17:          7
        8:          8
       18:          8
        8:          9
       19:          9
        8:         10
       20:         10
        8:         11
       10:          1
       11:         10
       10:          2
       12:         20
       10:          3
       13:         30
       10:          4
       14:         40
       10:          5
       15:         50
       10:          6
       16:         60
       10:          7
       17:         70
       10:          8
       18:         80
       10:          9
       19:         90
       10:         10
       20:        100
runtime error @pc 82, sp: 50: out-of-range
