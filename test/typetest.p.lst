# test/typetest.p, 1: { Test advanced types	}
# test/typetest.p, 2: program typetest() is
# test/typetest.p, 3: type
    0: calli 0, 2
    1: halt
# test/typetest.p, 4: 	int is integer;
# test/typetest.p, 5: 	rng is 1..10;
# test/typetest.p, 6: 	enum is (	one, two, three	);
# test/typetest.p, 7: 
# test/typetest.p, 8: var
# test/typetest.p, 9: 	i : int;
# test/typetest.p, 10: 	j : integer;
# test/typetest.p, 11: 	r : rng;
# test/typetest.p, 12: 	a : array[rng] of integer;
# test/typetest.p, 13: 	a2 : array [enum] of int;
# test/typetest.p, 14: 	a3 : array [0..4] of array [0..4] of real;
# test/typetest.p, 15: 
# test/typetest.p, 16: begin
    2: enter 41
# test/typetest.p, 17: 	i := 1; i := i + 1;
    3: pushvar 0, 4
    4: push 1
    5: assign 1
    6: pushvar 0, 4
    7: pushvar 0, 4
    8: eval 1
    9: push 1
   10: add
   11: assign 1
# test/typetest.p, 18: 	r := 1; r := r + 1;
   12: pushvar 0, 6
   13: push 1
   14: llimit 1
   15: ulimit 10
   16: assign 1
   17: pushvar 0, 6
   18: pushvar 0, 6
   19: eval 1
   20: push 1
   21: add
   22: llimit 1
   23: ulimit 10
   24: assign 1
# test/typetest.p, 19: 
# test/typetest.p, 20: 	i := 1;	{	fill a[] with its index	}
   25: pushvar 0, 4
   26: push 1
   27: assign 1
# test/typetest.p, 21:  	while i < 11 loop 
   28: pushvar 0, 4
   29: eval 1
   30: push 11
   31: lt
   32: jneqi 65
# test/typetest.p, 22: 		a[i] := i;
   33: pushvar 0, 7
   34: pushvar 0, 4
   35: eval 1
   36: llimit 1
   37: ulimit 10
   38: push 1
   39: sub
   40: add
   41: pushvar 0, 4
   42: eval 1
   43: assign 1
# test/typetest.p, 23: 		putln(a[i]);
   44: pushvar 0, 7
   45: pushvar 0, 4
   46: eval 1
   47: llimit 1
   48: ulimit 10
   49: push 1
   50: sub
   51: add
   52: eval 1
   53: push 1
   54: push 0
   55: push 0
   56: push 1
   57: putln
# test/typetest.p, 24: 		i := i + 1
   58: pushvar 0, 4
   59: pushvar 0, 4
   60: eval 1
   61: push 1
# test/typetest.p, 25: 	endloop;
   62: add
   63: assign 1
   64: jumpi 28
# test/typetest.p, 26: 
# test/typetest.p, 27: 	r := 1;	{	multiply by 10			}
   65: pushvar 0, 6
   66: push 1
   67: llimit 1
   68: ulimit 10
   69: assign 1
# test/typetest.p, 28: 	repeat
# test/typetest.p, 29: 		a[r] := a[r] * 10;
   70: pushvar 0, 7
   71: pushvar 0, 6
   72: eval 1
   73: llimit 1
   74: ulimit 10
   75: push 1
   76: sub
   77: add
   78: pushvar 0, 7
   79: pushvar 0, 6
   80: eval 1
   81: llimit 1
   82: ulimit 10
   83: push 1
   84: sub
   85: add
   86: eval 1
   87: push 10
   88: mul
   89: assign 1
# test/typetest.p, 30: 		putln(a[r]);
   90: pushvar 0, 7
   91: pushvar 0, 6
   92: eval 1
   93: llimit 1
   94: ulimit 10
   95: push 1
   96: sub
   97: add
   98: eval 1
   99: push 1
  100: push 0
  101: push 0
  102: push 1
  103: putln
# test/typetest.p, 31: 		r := r + 1
  104: pushvar 0, 6
  105: pushvar 0, 6
  106: eval 1
  107: push 1
# test/typetest.p, 32: 	until r = 10 endloop;
  108: add
  109: llimit 1
  110: ulimit 10
  111: assign 1
  112: pushvar 0, 6
  113: eval 1
  114: push 10
  115: equ
  116: jneqi 70
# test/typetest.p, 33: 
# test/typetest.p, 34: 	a2[one]	:= 1;
  117: pushvar 0, 17
  118: push 0
  119: llimit 0
  120: ulimit 2
  121: add
  122: push 1
  123: assign 1
# test/typetest.p, 35: 	a2[two]	:= 2;
  124: pushvar 0, 17
  125: push 1
  126: llimit 0
  127: ulimit 2
  128: add
  129: push 2
  130: assign 1
# test/typetest.p, 36: 	a2[three] := 3;
  131: pushvar 0, 17
  132: push 2
  133: llimit 0
  134: ulimit 2
  135: add
  136: push 3
  137: assign 1
# test/typetest.p, 37: 	put(a2[one]);
  138: pushvar 0, 17
  139: push 0
  140: llimit 0
  141: ulimit 2
  142: add
  143: eval 1
  144: push 1
  145: push 0
  146: push 0
  147: push 1
  148: put
# test/typetest.p, 38: 	put(a2[two]);
  149: pushvar 0, 17
  150: push 1
  151: llimit 0
  152: ulimit 2
  153: add
  154: eval 1
  155: push 1
  156: push 0
  157: push 0
  158: push 1
  159: put
# test/typetest.p, 39: 	putln(a2[three]);
  160: pushvar 0, 17
  161: push 2
  162: llimit 0
  163: ulimit 2
  164: add
  165: eval 1
  166: push 1
  167: push 0
  168: push 0
  169: push 1
  170: putln
# test/typetest.p, 40: 
# test/typetest.p, 41: 	i := 0;	{	fill a3[] with it's index	}
  171: pushvar 0, 4
  172: push 0
  173: assign 1
# test/typetest.p, 42: 	while (i < 5) loop
  174: pushvar 0, 4
  175: eval 1
  176: push 5
  177: lt
  178: jneqi 247
# test/typetest.p, 43: 		j := 0;
  179: pushvar 0, 5
  180: push 0
  181: assign 1
# test/typetest.p, 44: 		while (j < 5) loop
  182: pushvar 0, 5
  183: eval 1
  184: push 5
  185: lt
  186: jneqi 235
# test/typetest.p, 45: 			a3[i][j] := 1.0 * (i + j);
  187: pushvar 0, 20
  188: pushvar 0, 4
  189: eval 1
  190: llimit 0
  191: ulimit 4
  192: push 5
  193: mul
  194: add
  195: pushvar 0, 5
  196: eval 1
  197: llimit 0
  198: ulimit 4
  199: add
  200: push 1.000000
  201: pushvar 0, 4
  202: eval 1
  203: pushvar 0, 5
  204: eval 1
  205: add
  206: itor
  207: mul
  208: assign 1
# test/typetest.p, 46: 			put(a3[i][j], 7, 4);
  209: pushvar 0, 20
  210: pushvar 0, 4
  211: eval 1
  212: llimit 0
  213: ulimit 4
  214: push 5
  215: mul
  216: add
  217: pushvar 0, 5
  218: eval 1
  219: llimit 0
  220: ulimit 4
  221: add
  222: eval 1
  223: push 1
  224: push 7
  225: push 4
  226: push 1
  227: put
# test/typetest.p, 47: 			j := j + 1
  228: pushvar 0, 5
  229: pushvar 0, 5
  230: eval 1
  231: push 1
# test/typetest.p, 48: 		endloop;
  232: add
  233: assign 1
  234: jumpi 182
# test/typetest.p, 49: 		putln();
  235: push 0
  236: push 0
  237: push 0
  238: push 1
  239: putln
# test/typetest.p, 50: 		i := i + 1
  240: pushvar 0, 4
  241: pushvar 0, 4
  242: eval 1
  243: push 1
# test/typetest.p, 51: 	endloop
  244: add
  245: assign 1
# test/typetest.p, 52: endprog
  246: jumpi 174
# test/typetest.p, 53: 
  247: ret 0

1
2
3
4
5
6
7
8
9
10
10
20
30
40
50
60
70
80
90
123
 0.0000 1.0000 2.0000 3.0000 4.0000
 1.0000 2.0000 3.0000 4.0000 5.0000
 2.0000 3.0000 4.0000 5.0000 6.0000
 3.0000 4.0000 5.0000 6.0000 7.0000
 4.0000 5.0000 6.0000 7.0000 8.0000
