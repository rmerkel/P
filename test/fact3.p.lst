test/fact3.p: passing 2 parameters, where 1 expected near line 28
# test/fact3.p, 1: { Calculate 11 (0..10) factorials
# test/fact3.p, 2: {	 n		    n!	}
# test/fact3.p, 3: {  ---  ---------	}
# test/fact3.p, 4: {	 0		    0	}
# test/fact3.p, 5: {	 1		    1	}
# test/fact3.p, 6: {	 2		    2	}
# test/fact3.p, 7: {	 3		    6	}
# test/fact3.p, 8: {	...				}
# test/fact3.p, 9: {	 9	  362,880	}
# test/fact3.p, 10: {	10	3,628,800	}
# test/fact3.p, 11: 
# test/fact3.p, 12: program fact3 ;
# test/fact3.p, 13: const nFacts = 10;
    0: push 0
    1: push 34
    2: call
    3: halt
# test/fact3.p, 14: var result : integer;
# test/fact3.p, 15: function factorial(n : integer) : integer ;
# test/fact3.p, 16: 	var p : integer;
# test/fact3.p, 17: 	begin
    4: enter 1
# test/fact3.p, 18: 		p := 1;
    5: pushvar 0, 4
    6: push 1
    7: assign 1
# test/fact3.p, 19: 		while n > 0 do begin
    8: pushvar 0, -1
    9: eval 1
   10: push 0
   11: gt
   12: push 29
   13: jneq
# test/fact3.p, 20: 			p := p * n;
   14: pushvar 0, 4
   15: pushvar 0, 4
   16: eval 1
   17: pushvar 0, -1
   18: eval 1
   19: mul
   20: assign 1
# test/fact3.p, 21: 			n := n - 1
   21: pushvar 0, -1
   22: pushvar 0, -1
   23: eval 1
   24: push 1
# test/fact3.p, 22: 		end;
   25: sub
   26: assign 1
   27: push 8
   28: jump
# test/fact3.p, 23: 		factorial := p;
   29: pushvar 0, 3
   30: pushvar 0, 4
   31: eval 1
   32: assign 1
# test/fact3.p, 24: 	end;
   33: retf
# test/fact3.p, 25: 
# test/fact3.p, 26: begin
   34: enter 1
# test/fact3.p, 27: 	{ call with wrong number of parameters! }
# test/fact3.p, 28:     result := factorial(nFacts, nFacts);
   35: pushvar 0, 4
   36: push 10
   37: push 10
   38: push 0
   39: push 4
   40: call
   41: assign 1
# test/fact3.p, 29: 	writeln(result)
   42: pushvar 0, 4
   43: eval 1
   44: push 1
   45: push 0
   46: push 0
# test/fact3.p, 30: end.
   47: push 1
   48: writeln
   49: ret

