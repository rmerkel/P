# test/fib.p, 1: program Fibonacci() is
# test/fib.p, 2: 	function fib(a, b, limit : integer) : integer is
    0: calli 0, 37
    1: halt
# test/fib.p, 3: 	begin
# test/fib.p, 4: 		put_line(b);
    2: pushvar 0, -2
    3: eval 1
    4: push 1
    5: push 0
    6: push 0
    7: put_line
# test/fib.p, 5: 		if limit > 0 then
    8: pushvar 0, -1
    9: eval 1
   10: push 0
   11: gt
   12: jneqi 29
# test/fib.p, 6: 			return fib(b, a+b, limit - 1)
   13: pushvar 0, 3
   14: pushvar 0, -2
   15: eval 1
   16: pushvar 0, -3
   17: eval 1
   18: pushvar 0, -2
   19: eval 1
   20: add
   21: pushvar 0, -1
   22: eval 1
   23: push 1
   24: sub
# test/fib.p, 7: 		else
   25: calli 1, 2
   26: assign 1
   27: retf 3
# test/fib.p, 8: 			return a + b
   28: jumpi 37
   29: pushvar 0, 3
   30: pushvar 0, -3
   31: eval 1
# test/fib.p, 9: 		endif
   32: pushvar 0, -2
   33: eval 1
   34: add
   35: assign 1
   36: retf 3
# test/fib.p, 10: 	endfunc
# test/fib.p, 11: 
# test/fib.p, 12: begin
# test/fib.p, 13: 	put_line(0);
   37: push 0
   38: push 1
   39: push 0
   40: push 0
   41: put_line
# test/fib.p, 14: 	put_line(fib(0, 1, 10))
   42: push 0
   43: push 1
   44: push 10
   45: calli 0, 2
   46: push 1
   47: push 0
   48: push 0
# test/fib.p, 15: endprog
   49: put_line
# test/fib.p, 16: 
# test/fib.p, 17: 
   50: ret 0

0
1
1
2
3
5
8
13
21
34
55
89
144
