# test/fib.p, 1: program Fibonacci() is
# test/fib.p, 2: 	function fib(a, b, limit : integer) : integer is
    0: calli 0, 41
    1: halt
# test/fib.p, 3: 	begin
# test/fib.p, 4: 		put_line(b);
    2: pushvar 0, -2
    3: eval 1
    4: push 1
    5: push 0
    6: push 0
    7: put
    8: push '
'
    9: push 1
   10: push 0
   11: push 0
   12: put
# test/fib.p, 5: 		if limit > 0 then
   13: pushvar 0, -1
   14: eval 1
   15: push 0
   16: gt
   17: jneqi 33
# test/fib.p, 6: 			fib := fib(b, a+b, limit - 1)
   18: pushvar 0, 3
   19: pushvar 0, -2
   20: eval 1
   21: pushvar 0, -3
   22: eval 1
   23: pushvar 0, -2
   24: eval 1
   25: add
   26: pushvar 0, -1
   27: eval 1
   28: push 1
   29: sub
# test/fib.p, 7: 		else
   30: calli 1, 2
   31: assign 1
# test/fib.p, 8: 			fib := a + b
   32: jumpi 40
   33: pushvar 0, 3
   34: pushvar 0, -3
   35: eval 1
# test/fib.p, 9: 		endif
   36: pushvar 0, -2
   37: eval 1
   38: add
   39: assign 1
# test/fib.p, 10: 	endfunc
# test/fib.p, 11: 
# test/fib.p, 12: begin
   40: retf
# test/fib.p, 13: 	put_line(0);
   41: push 0
   42: push 1
   43: push 0
   44: push 0
   45: put
   46: push '
'
   47: push 1
   48: push 0
   49: push 0
   50: put
# test/fib.p, 14: 	put_line(fib(0, 1, 10))
   51: push 0
   52: push 1
   53: push 10
   54: calli 0, 2
   55: push 1
   56: push 0
   57: push 0
   58: put
# test/fib.p, 15: endprog
   59: push '
'
   60: push 1
   61: push 0
   62: push 0
   63: put
# test/fib.p, 16: 
# test/fib.p, 17: 
   64: ret

0
1
1
2
3
5
8
13
21
34
55
89
144
