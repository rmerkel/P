# test/fib.p, 1: program Fibonacci() is
# test/fib.p, 2: 	function fib(a, b, limit : integer) : integer is
    0: calli 0, 38
    1: halt
# test/fib.p, 3: 	begin
# test/fib.p, 4: 		putln(b);
    2: pushvar 0, -2
    3: eval 1
    4: push 1
    5: push 0
    6: push 0
    7: push 1
    8: putln
# test/fib.p, 5: 		if limit > 0 then
    9: pushvar 0, -1
   10: eval 1
   11: push 0
   12: gt
   13: jneqi 30
# test/fib.p, 6: 			return fib(b, a+b, limit - 1)
   14: pushvar 0, 3
   15: pushvar 0, -2
   16: eval 1
   17: pushvar 0, -3
   18: eval 1
   19: pushvar 0, -2
   20: eval 1
   21: add
   22: pushvar 0, -1
   23: eval 1
   24: push 1
   25: sub
# test/fib.p, 7: 		else
   26: calli 1, 2
   27: assign 1
   28: retf 3
# test/fib.p, 8: 			return a + b
   29: jumpi 38
   30: pushvar 0, 3
   31: pushvar 0, -3
   32: eval 1
# test/fib.p, 9: 		endif
   33: pushvar 0, -2
   34: eval 1
   35: add
   36: assign 1
   37: retf 3
# test/fib.p, 10: 	endfunc
# test/fib.p, 11: 
# test/fib.p, 12: begin
# test/fib.p, 13: 	putln(0);
   38: push 0
   39: push 1
   40: push 0
   41: push 0
   42: push 1
   43: putln
# test/fib.p, 14: 	putln(fib(0, 1, 10))
   44: push 0
   45: push 1
   46: push 10
   47: calli 0, 2
   48: push 1
   49: push 0
   50: push 0
# test/fib.p, 15: endprog
   51: push 1
   52: putln
# test/fib.p, 16: 
# test/fib.p, 17: 
   53: ret 0

0
1
1
2
3
5
8
13
21
34
55
89
144
