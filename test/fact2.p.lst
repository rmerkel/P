# fact2.p, 2: { Calculate 11 (0..10) factorials	}
# fact2.p, 3: {	 n		    n!	}
# fact2.p, 4: {  ---  ---------	}
# fact2.p, 5: {	 0		    0	}
# fact2.p, 6: {	 1		    1	}
# fact2.p, 7: {	 2		    2	}
# fact2.p, 8: {	 3		    6	}
# fact2.p, 9: {	...				}
# fact2.p, 10: {	 9	  362,880	}
# fact2.p, 11: {	10	3,628,800	}
# fact2.p, 12: 
# fact2.p, 13: const nFacts = 10;
    0: call 0, 30
    1: halt
# fact2.p, 14: var result;
# fact2.p, 15: function factorial(n)
# fact2.p, 16: 	var p;
# fact2.p, 17: 
# fact2.p, 18: 	begin
    2: enter 1
# fact2.p, 19: 		p = 1;
    3: pushVar 0, 4
    4: push 1
    5: assign
# fact2.p, 20: 		while n > 0 do begin
    6: pushVar 0, -1
    7: eval
    8: push 0
    9: gt
   10: jneq 25
# fact2.p, 21: 			p = p * n;
   11: pushVar 0, 4
   12: pushVar 0, 4
   13: eval
   14: pushVar 0, -1
   15: eval
   16: mul
   17: assign
# fact2.p, 22: 			n = n - 1
   18: pushVar 0, -1
   19: pushVar 0, -1
   20: eval
   21: push 1
# fact2.p, 23: 		end;
   22: sub
   23: assign
   24: jump 6
# fact2.p, 24: 		factorial = p;
   25: pushVar 0, 3
   26: pushVar 0, 4
   27: eval
   28: assign
# fact2.p, 25: 	end;
   29: retf
# fact2.p, 26: 
# fact2.p, 27: begin
   30: enter 1
# fact2.p, 28: 	{ The result is the 10th factorial; 3,628,000	}
# fact2.p, 29:     result = factorial(nFacts)
   31: pushVar 0, 4
   32: push 10
# fact2.p, 30: end.
   33: call 0, 2
   34: assign
   35: ret

       15:          1
       15:         10
       10:          9
       15:         90
       10:          8
       15:        720
       10:          7
       15:       5040
       10:          6
       15:      30240
       10:          5
       15:     151200
       10:          4
       15:     604800
       10:          3
       15:    1814400
       10:          2
       15:    3628800
       10:          1
       15:    3628800
       10:          0
       14:    3628800
        8:    3628800
