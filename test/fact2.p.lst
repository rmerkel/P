# fact2.p, 2: { Calculate 11 (0..10) factorials	}
# fact2.p, 3: {	 n		    n!	}
# fact2.p, 4: {  ---  ---------	}
# fact2.p, 5: {	 0		    0	}
# fact2.p, 6: {	 1		    1	}
# fact2.p, 7: {	 2		    2	}
# fact2.p, 8: {	 3		    6	}
# fact2.p, 9: {	...				}
# fact2.p, 10: {	 9	  362,880	}
# fact2.p, 11: {	10	3,628,800	}
# fact2.p, 12: 
# fact2.p, 13: program fact2 ;
# fact2.p, 14: const nFacts = 10;
    0: call 0, 30
    1: halt
# fact2.p, 15: var result : integer;
# fact2.p, 16: function factorial(n : integer) : integer ;
# fact2.p, 17: 	var p : integer;
# fact2.p, 18: 
# fact2.p, 19: 	begin
    2: enter 1
# fact2.p, 20: 		p := 1;
    3: push 1
    4: pushvar 0, 4
    5: assign
# fact2.p, 21: 		while n > 0 do begin
    6: pushvar 0, -1
    7: eval
    8: push 0
    9: gt
   10: jneq 25
# fact2.p, 22: 			p := p * n;
   11: pushvar 0, 4
   12: eval
   13: pushvar 0, -1
   14: eval
   15: mul
   16: pushvar 0, 4
   17: assign
# fact2.p, 23: 			n := n - 1
   18: pushvar 0, -1
   19: eval
   20: push 1
# fact2.p, 24: 		end;
   21: sub
   22: pushvar 0, -1
   23: assign
   24: jump 6
# fact2.p, 25: 		factorial := p;
   25: pushvar 0, 4
   26: eval
   27: pushvar 0, 3
   28: assign
# fact2.p, 26: 	end;
   29: retf
# fact2.p, 27: 
# fact2.p, 28: begin
   30: enter 1
# fact2.p, 29: 	{ The result is the 10th factorial; 3,628,000	}
# fact2.p, 30:     result := factorial(nFacts)
   31: push 10
# fact2.p, 31: end.
   32: call 0, 2
   33: pushvar 0, 4
   34: assign
   35: ret

       14:          1
       14:         10
        9:          9
       14:         90
        9:          8
       14:        720
        9:          7
       14:       5040
        9:          6
       14:      30240
        9:          5
       14:     151200
        9:          4
       14:     604800
        9:          3
       14:    1814400
        9:          2
       14:    3628800
        9:          1
       14:    3628800
        9:          0
       13:    3628800
        8:    3628800
