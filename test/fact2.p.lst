# test/fact2.p, 1: { Calculate 11 (0..10) factorials	}
# test/fact2.p, 2: {	 n		    n!	}
# test/fact2.p, 3: {  ---  ---------	}
# test/fact2.p, 4: {	 0		    0	}
# test/fact2.p, 5: {	 1		    1	}
# test/fact2.p, 6: {	 2		    2	}
# test/fact2.p, 7: {	 3		    6	}
# test/fact2.p, 8: {	...				}
# test/fact2.p, 9: {	 9	  362,880	}
# test/fact2.p, 10: {	10	3,628,800	}
# test/fact2.p, 11: 
# test/fact2.p, 12: program fact2() is
# test/fact2.p, 13: const nFacts = 10;
    0: calli 0, 30
    1: halt
# test/fact2.p, 14: var result : integer;
# test/fact2.p, 15: function factorial(n : integer) : integer is
# test/fact2.p, 16: 	var p : integer;
# test/fact2.p, 17: 	begin
    2: enter 1
# test/fact2.p, 18: 		p := 1;
    3: pushvar 0, 4
    4: push 1
    5: assign 1
# test/fact2.p, 19: 		while n > 0 loop
    6: pushvar 0, -1
    7: eval 1
    8: push 0
    9: gt
   10: jneqi 25
# test/fact2.p, 20: 			p := p * n;
   11: pushvar 0, 4
   12: pushvar 0, 4
   13: eval 1
   14: pushvar 0, -1
   15: eval 1
   16: mul
   17: assign 1
# test/fact2.p, 21: 			n := n - 1
   18: pushvar 0, -1
   19: pushvar 0, -1
   20: eval 1
   21: push 1
# test/fact2.p, 22: 		endloop;
   22: sub
   23: assign 1
   24: jumpi 6
# test/fact2.p, 23: 		return p
   25: pushvar 0, 3
# test/fact2.p, 24: 	endfunc
   26: pushvar 0, 4
   27: eval 1
   28: assign 1
   29: retf 1
# test/fact2.p, 25: 
# test/fact2.p, 26: begin
   30: enter 1
# test/fact2.p, 27: 	{ The result is the 10th factorial; 3,628,000	}
# test/fact2.p, 28:     result := factorial(nFacts);
   31: pushvar 0, 4
   32: push 10
   33: calli 0, 2
   34: assign 1
# test/fact2.p, 29: 	putln(result)
   35: pushvar 0, 4
   36: eval 1
   37: push 1
   38: push 0
   39: push 0
# test/fact2.p, 30: endprog
   40: putln
# test/fact2.p, 31: 
   41: ret 0

3628800
