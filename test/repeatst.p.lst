# test/repeatst.p, 1: { Calculate 11 (0..10) factorials
# test/repeatst.p, 2: {	 n		    n!	}
# test/repeatst.p, 3: {  ---  ---------	}
# test/repeatst.p, 4: {	 0		    0	}
# test/repeatst.p, 5: {	 1		    1	}
# test/repeatst.p, 6: {	 2		    2	}
# test/repeatst.p, 7: {	 3		    6	}
# test/repeatst.p, 8: {	...				}
# test/repeatst.p, 9: {	 9	  362,880	}
# test/repeatst.p, 10: {	10	3,628,800	}
# test/repeatst.p, 11: 
# test/repeatst.p, 12: program repeatst ;
# test/repeatst.p, 13: var n, f : integer;
    0: push 0
    1: push 4
    2: call
    3: halt
# test/repeatst.p, 14: begin
    4: enter 2
# test/repeatst.p, 15: 	n := 0;
    5: pushvar 0, 4
    6: push 0
    7: assign 1
# test/repeatst.p, 16: 	f := 1;
    8: pushvar 0, 5
    9: push 1
   10: assign 1
# test/repeatst.p, 17: 	repeat
# test/repeatst.p, 18: 		begin
# test/repeatst.p, 19: 			n := n + 1;
   11: pushvar 0, 4
   12: pushvar 0, 4
   13: eval 1
   14: push 1
   15: add
   16: assign 1
# test/repeatst.p, 20: 			f := f * n;
   17: pushvar 0, 5
   18: pushvar 0, 5
   19: eval 1
   20: pushvar 0, 4
   21: eval 1
   22: mul
   23: assign 1
# test/repeatst.p, 21: 			writeln(f : 8 : 6)
   24: pushvar 0, 5
   25: eval 1
   26: push 1
   27: push 8
   28: push 6
# test/repeatst.p, 22: 		end
   29: push 1
   30: writeln
# test/repeatst.p, 23: 	until n >= 10
   31: pushvar 0, 4
   32: eval 1
   33: push 10
# test/repeatst.p, 24: end.
   34: gte
   35: push 11
   36: jneq
   37: ret

       1
       2
       6
      24
     120
     720
    5040
   40320
  362880
 3628800
