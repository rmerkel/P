# test/repeatst.p, 2: { Calculate 11 (0..10) factorials
# test/repeatst.p, 3: {	 n		    n!	}
# test/repeatst.p, 4: {  ---  ---------	}
# test/repeatst.p, 5: {	 0		    0	}
# test/repeatst.p, 6: {	 1		    1	}
# test/repeatst.p, 7: {	 2		    2	}
# test/repeatst.p, 8: {	 3		    6	}
# test/repeatst.p, 9: {	...				}
# test/repeatst.p, 10: {	 9	  362,880	}
# test/repeatst.p, 11: {	10	3,628,800	}
# test/repeatst.p, 12: 
# test/repeatst.p, 13: program repeatst ;
# test/repeatst.p, 14: var n, f : integer;
    0: call 0, 2
    1: halt
# test/repeatst.p, 15: begin
    2: enter 2
# test/repeatst.p, 16: 	n := 0;
    3: push 0
    4: pushvar 0, 4
    5: assign
# test/repeatst.p, 17: 	f := 1;
    6: push 1
    7: pushvar 0, 5
    8: assign
# test/repeatst.p, 18: 	repeat
# test/repeatst.p, 19: 		begin
# test/repeatst.p, 20: 			n := n + 1;
    9: pushvar 0, 4
   10: eval
   11: push 1
   12: add
   13: pushvar 0, 4
   14: assign
# test/repeatst.p, 21: 			f := f * n
   15: pushvar 0, 5
   16: eval
# test/repeatst.p, 22: 		end
   17: pushvar 0, 4
   18: eval
   19: mul
   20: pushvar 0, 5
   21: assign
# test/repeatst.p, 23: 	until n >= 10
   22: pushvar 0, 4
   23: eval
   24: push 10
# test/repeatst.p, 24: end.
   25: gte
   26: jneq 9
   27: ret

        8:          0
        9:          1
        8:          1
        9:          1
        8:          2
        9:          2
        8:          3
        9:          6
        8:          4
        9:         24
        8:          5
        9:        120
        8:          6
        9:        720
        8:          7
        9:       5040
        8:          8
        9:      40320
        8:          9
        9:     362880
        8:         10
        9:    3628800
