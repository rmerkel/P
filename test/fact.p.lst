# fact.p, 2: { Calculate 11 (0..10) factorials
# fact.p, 3: {	 n		    n!	}
# fact.p, 4: {  ---  ---------	}
# fact.p, 5: {	 0		    0	}
# fact.p, 6: {	 1		    1	}
# fact.p, 7: {	 2		    2	}
# fact.p, 8: {	 3		    6	}
# fact.p, 9: {	...				}
# fact.p, 10: {	 9	  362,880	}
# fact.p, 11: {	10	3,628,800	}
# fact.p, 12: 
# fact.p, 13: const nFacts = 10;
    0: call 0, 25
    1: halt
# fact.p, 14: var p;
# fact.p, 15: procedure factorial(n) begin
# fact.p, 16:         p = 1;
    2: push 1
    3: pushVar 1, 4
    4: assign
# fact.p, 17:         while n > 0 do begin
    5: pushVar 0, -1
    6: eval
    7: push 0
    8: gt
    9: jneq 24
# fact.p, 18:             p = p * n;
   10: pushVar 1, 4
   11: eval
   12: pushVar 0, -1
   13: eval
   14: mul
   15: pushVar 1, 4
   16: assign
# fact.p, 19:             n = n - 1
   17: pushVar 0, -1
   18: eval
   19: push 1
# fact.p, 20:         end
   20: sub
   21: pushVar 0, -1
   22: assign
# fact.p, 21:     end;
   23: jump 5
   24: ret
# fact.p, 22: 
# fact.p, 23: begin
   25: enter 1
# fact.p, 24:     factorial(nFacts)
   26: push 10
# fact.p, 25: end.
   27: call 0, 2
   28: ret

        8:          1
        8:         10
        9:          9
        8:         90
        9:          8
        8:        720
        9:          7
        8:       5040
        9:          6
        8:      30240
        9:          5
        8:     151200
        9:          4
        8:     604800
        9:          3
        8:    1814400
        9:          2
        8:    3628800
        9:          1
        8:    3628800
        9:          0
