# test/fact.p, 1: { Calculate 11 (0..10) factorials }
# test/fact.p, 2: {	 n		    n!	}
# test/fact.p, 3: {  ---  ---------	}
# test/fact.p, 4: {	 0		    0	}
# test/fact.p, 5: {	 1		    1	}
# test/fact.p, 6: {	 2		    2	}
# test/fact.p, 7: {	 3		    6	}
# test/fact.p, 8: {	...				}
# test/fact.p, 9: {	 9	  362,880	}
# test/fact.p, 10: {	10	3,628,800	}
# test/fact.p, 11: 
# test/fact.p, 12: program fact() is
# test/fact.p, 13: const nFacts = 10;
    0: calli 0, 38
    1: halt
# test/fact.p, 14: procedure factorial(n : integer) is
# test/fact.p, 15: 	var p : integer;
# test/fact.p, 16: 	begin
    2: enter 1
# test/fact.p, 17:         p := 1;
    3: pushvar 0, 4
    4: push 1
    5: assign 1
# test/fact.p, 18: 		putln(p);
    6: pushvar 0, 4
    7: eval 1
    8: push 1
    9: push 0
   10: push 0
   11: putln
# test/fact.p, 19:         while n > 0 loop
   12: pushvar 0, -1
   13: eval 1
   14: push 0
   15: gt
   16: jneqi 37
# test/fact.p, 20:             p := p * n;
   17: pushvar 0, 4
   18: pushvar 0, 4
   19: eval 1
   20: pushvar 0, -1
   21: eval 1
   22: mul
   23: assign 1
# test/fact.p, 21:             n := n - 1;
   24: pushvar 0, -1
   25: pushvar 0, -1
   26: eval 1
   27: push 1
   28: sub
   29: assign 1
# test/fact.p, 22: 			putln(p)
   30: pushvar 0, 4
   31: eval 1
   32: push 1
   33: push 0
   34: push 0
# test/fact.p, 23:         endloop
   35: putln
# test/fact.p, 24:     endproc
   36: jumpi 12
# test/fact.p, 25: 
# test/fact.p, 26: begin
   37: ret 1
# test/fact.p, 27:     factorial(nFacts)
   38: push 10
# test/fact.p, 28: endprog
   39: calli 0, 2
# test/fact.p, 29: 
   40: ret 0

1
10
90
720
5040
30240
151200
604800
1814400
3628800
3628800
