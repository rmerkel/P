# test/fact.p, 1: { Calculate 11 (0..10) factorials
# test/fact.p, 2: {	 n		    n!	}
# test/fact.p, 3: {  ---  ---------	}
# test/fact.p, 4: {	 0		    0	}
# test/fact.p, 5: {	 1		    1	}
# test/fact.p, 6: {	 2		    2	}
# test/fact.p, 7: {	 3		    6	}
# test/fact.p, 8: {	...				}
# test/fact.p, 9: {	 9	  362,880	}
# test/fact.p, 10: {	10	3,628,800	}
# test/fact.p, 11: 
# test/fact.p, 12: program fact ;
# test/fact.p, 13: const nFacts = 10;
    0: call 0, 37
    1: halt
# test/fact.p, 14: var p : integer;
# test/fact.p, 15: procedure factorial(n : integer) ; begin
# test/fact.p, 16:         p := 1;
    2: pushvar 1, 4
    3: push 1
    4: assign 1
# test/fact.p, 17: 		writeln(p);
    5: pushvar 1, 4
    6: eval 1
    7: push 0
    8: push 0
    9: push 1
   10: writeln
# test/fact.p, 18:         while n > 0 do begin
   11: pushvar 0, -1
   12: eval 1
   13: push 0
   14: gt
   15: jneq 36
# test/fact.p, 19:             p := p * n;
   16: pushvar 1, 4
   17: pushvar 1, 4
   18: eval 1
   19: pushvar 0, -1
   20: eval 1
   21: mul
   22: assign 1
# test/fact.p, 20:             n := n - 1;
   23: pushvar 0, -1
   24: pushvar 0, -1
   25: eval 1
   26: push 1
   27: sub
   28: assign 1
# test/fact.p, 21: 			writeln(p)
   29: pushvar 1, 4
   30: eval 1
   31: push 0
   32: push 0
# test/fact.p, 22:         end
   33: push 1
   34: writeln
# test/fact.p, 23:     end;
   35: jump 11
   36: ret
# test/fact.p, 24: 
# test/fact.p, 25: begin
   37: enter 1
# test/fact.p, 26:     factorial(nFacts)
   38: push 10
# test/fact.p, 27: end.
   39: call 0, 2
   40: ret

1
10
90
720
5040
30240
151200
604800
1814400
3628800
3628800
