# test/fact.p, 1: { Calculate 11 (0..10) factorials
# test/fact.p, 2: {	 n		    n!	}
# test/fact.p, 3: {  ---  ---------	}
# test/fact.p, 4: {	 0		    0	}
# test/fact.p, 5: {	 1		    1	}
# test/fact.p, 6: {	 2		    2	}
# test/fact.p, 7: {	 3		    6	}
# test/fact.p, 8: {	...				}
# test/fact.p, 9: {	 9	  362,880	}
# test/fact.p, 10: {	10	3,628,800	}
# test/fact.p, 11: 
# test/fact.p, 12: program fact ;
# test/fact.p, 13: const nFacts = 10;
    0: push 0
    1: push 43
    2: call
    3: halt
# test/fact.p, 14: var p : integer;
# test/fact.p, 15: procedure factorial(n : integer) ; begin
# test/fact.p, 16:         p := 1;
    4: pushvar 1, 4
    5: push 1
    6: assign 1
# test/fact.p, 17: 		writeln(p);
    7: pushvar 1, 4
    8: eval 1
    9: push 1
   10: push 0
   11: push 0
   12: push 1
   13: writeln
# test/fact.p, 18:         while n > 0 do begin
   14: pushvar 0, -1
   15: eval 1
   16: push 0
   17: gt
   18: push 42
   19: jneq
# test/fact.p, 19:             p := p * n;
   20: pushvar 1, 4
   21: pushvar 1, 4
   22: eval 1
   23: pushvar 0, -1
   24: eval 1
   25: mul
   26: assign 1
# test/fact.p, 20:             n := n - 1;
   27: pushvar 0, -1
   28: pushvar 0, -1
   29: eval 1
   30: push 1
   31: sub
   32: assign 1
# test/fact.p, 21: 			writeln(p)
   33: pushvar 1, 4
   34: eval 1
   35: push 1
   36: push 0
   37: push 0
# test/fact.p, 22:         end
   38: push 1
   39: writeln
# test/fact.p, 23:     end;
   40: push 14
   41: jump
   42: ret
# test/fact.p, 24: 
# test/fact.p, 25: begin
   43: enter 1
# test/fact.p, 26:     factorial(nFacts)
   44: push 10
# test/fact.p, 27: end.
   45: push 0
   46: push 4
   47: call
   48: ret

1
10
90
720
5040
30240
151200
604800
1814400
3628800
3628800
